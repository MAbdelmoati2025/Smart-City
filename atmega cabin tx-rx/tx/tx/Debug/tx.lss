
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cc  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044c  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_F_Set_Port_Dir>:
			break;
			case PC:
			PORTC = 0xFF;
			break;
			case PD:
			PORTD = 0xFF;
  6c:	66 23       	and	r22, r22
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_F_Set_Port_Dir+0xa>
  70:	61 30       	cpi	r22, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_F_Set_Port_Dir+0x2a>
  74:	08 95       	ret
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	41 f0       	breq	.+16     	; 0x8a <DIO_F_Set_Port_Dir+0x1e>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_F_Set_Port_Dir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	39 f0       	breq	.+14     	; 0x8e <DIO_F_Set_Port_Dir+0x22>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	39 f0       	breq	.+14     	; 0x92 <DIO_F_Set_Port_Dir+0x26>
  84:	08 95       	ret
  86:	1a ba       	out	0x1a, r1	; 26
  88:	08 95       	ret
  8a:	17 ba       	out	0x17, r1	; 23
  8c:	08 95       	ret
  8e:	14 ba       	out	0x14, r1	; 20
  90:	08 95       	ret
  92:	11 ba       	out	0x11, r1	; 17
  94:	08 95       	ret
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	49 f0       	breq	.+18     	; 0xac <DIO_F_Set_Port_Dir+0x40>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_F_Set_Port_Dir+0x3a>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	49 f0       	breq	.+18     	; 0xb2 <DIO_F_Set_Port_Dir+0x46>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	51 f0       	breq	.+20     	; 0xb8 <DIO_F_Set_Port_Dir+0x4c>
  a4:	08 95       	ret
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 bb       	out	0x14, r24	; 20
  b6:	08 95       	ret
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	08 95       	ret

000000be <DIO_F_Set_Port_Val>:
}


void DIO_F_Set_Port_Val(U8_t port_Name, U8_t value)
{
	switch (port_Name)
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	41 f0       	breq	.+16     	; 0xd2 <DIO_F_Set_Port_Val+0x14>
  c2:	28 f0       	brcs	.+10     	; 0xce <DIO_F_Set_Port_Val+0x10>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	39 f0       	breq	.+14     	; 0xd6 <DIO_F_Set_Port_Val+0x18>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	39 f0       	breq	.+14     	; 0xda <DIO_F_Set_Port_Val+0x1c>
  cc:	08 95       	ret
	{
		case PA:
		PORTA = value;
  ce:	6b bb       	out	0x1b, r22	; 27
		break;
  d0:	08 95       	ret
		case PB:
		PORTB = value;
  d2:	68 bb       	out	0x18, r22	; 24
		break;
  d4:	08 95       	ret
		case PC:
		PORTC = value;
  d6:	65 bb       	out	0x15, r22	; 21
		break;
  d8:	08 95       	ret
		case PD:
		PORTD = value;
  da:	62 bb       	out	0x12, r22	; 18
  dc:	08 95       	ret

000000de <main>:
#define F_CPU 1000000
#include <util/delay.h>

int main(void)
{
	DIO_F_Set_Port_Dir(PC,OUTPUT);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_F_Set_Port_Dir>
    
    while (1) 
    {
		DIO_F_Set_Port_Val(PC,3);
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_F_Set_Port_Val>
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <main+0x8>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
