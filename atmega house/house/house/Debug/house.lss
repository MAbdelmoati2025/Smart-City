
house.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c65  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000715  00000000  00000000  000011c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000609  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000641  00000000  00000000  0000255a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  74:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_F_Init>:
void ADC_F_Init(ENUM_ADC_Vref_Type vref, ENUM_ADC_Prescaler_Type prescaler)
{
	//DIO_F_Set_Pin_Dir(CHANNEL_PORT, channel, INPUT); // input floating
	 
     /*setting the reference voltage*/
   switch (vref)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	59 f0       	breq	.+22     	; 0x96 <ADC_F_Init+0x1a>
  80:	18 f0       	brcs	.+6      	; 0x88 <ADC_F_Init+0xc>
  82:	83 30       	cpi	r24, 0x03	; 3
  84:	79 f0       	breq	.+30     	; 0xa4 <ADC_F_Init+0x28>
  86:	14 c0       	rjmp	.+40     	; 0xb0 <ADC_F_Init+0x34>
    {
        case ADC_AREF:
        CLR_BIT(ADMUX, REFS1);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 77       	andi	r24, 0x7F	; 127
  8c:	87 b9       	out	0x07, r24	; 7
        CLR_BIT(ADMUX, REFS0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	8f 7b       	andi	r24, 0xBF	; 191
  92:	87 b9       	out	0x07, r24	; 7
            break;
  94:	0d c0       	rjmp	.+26     	; 0xb0 <ADC_F_Init+0x34>
        case ADC_VCC:
        CLR_BIT(ADMUX, REFS1);
  96:	87 b1       	in	r24, 0x07	; 7
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	87 b9       	out	0x07, r24	; 7
        SET_BIT(ADMUX, REFS0);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	87 b9       	out	0x07, r24	; 7
            break;
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <ADC_F_Init+0x34>
        case ADC_V256:
        SET_BIT(ADMUX, REFS1);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	87 b9       	out	0x07, r24	; 7
        SET_BIT(ADMUX, REFS0);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	87 b9       	out	0x07, r24	; 7
            break;
    }


    /*setting the prescaler*/
    ADCSRA &= 0xF8; //3 bits must be cleared before setting the wanted value
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= prescaler; // very true if we use here switch of if condition
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	68 2b       	or	r22, r24
  ba:	66 b9       	out	0x06, r22	; 6

    /*adjust the read to the right*/
    //CLR_BIT(ADMUX, ADLAR);

    /*enable the ADC*/ // must be at the end of the peripheral configuration
    SET_BIT(ADCSRA, ADEN);
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	86 b9       	out	0x06, r24	; 6
  c2:	08 95       	ret

000000c4 <ADC_F_Read>:
U16_t ADC_F_Read(ENUM_ADC_Channel_Type channel )
{
    U16_t adc = 0;
    
    /*select the input channel channel*/
    ADMUX &= 0b11100000;
  c4:	97 b1       	in	r25, 0x07	; 7
  c6:	90 7e       	andi	r25, 0xE0	; 224
  c8:	97 b9       	out	0x07, r25	; 7
    ADMUX |= channel;
  ca:	97 b1       	in	r25, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	87 b9       	out	0x07, r24	; 7
	
    /*start the conversion*/
    SET_BIT(ADCSRA, ADSC); // busy wait
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	86 b9       	out	0x06, r24	; 6
    while(GET_BIT(ADCSRA, ADSC)); //busy flag
  d6:	36 99       	sbic	0x06, 6	; 6
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <ADC_F_Read+0x12>
	
	adc = ADCLH;
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	95 b1       	in	r25, 0x05	; 5
    return adc;
}
  de:	08 95       	ret

000000e0 <ADC_F_Start_Conversion>:

void ADC_F_Start_Conversion(ENUM_ADC_Channel_Type channel )
{
	
	/*select the input channel channel*/
	ADMUX &= 0b11100000;
  e0:	97 b1       	in	r25, 0x07	; 7
  e2:	90 7e       	andi	r25, 0xE0	; 224
  e4:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
  e6:	97 b1       	in	r25, 0x07	; 7
  e8:	89 2b       	or	r24, r25
  ea:	87 b9       	out	0x07, r24	; 7
	
	/*start the conversion*/
	SET_BIT(ADCSRA, ADSC); // busy wait
  ec:	86 b1       	in	r24, 0x06	; 6
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	86 b9       	out	0x06, r24	; 6
  f2:	08 95       	ret

000000f4 <__vector_16>:
}


ISR(ADC_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	G_ADC = ADCLH;
 116:	84 b1       	in	r24, 0x04	; 4
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	ADC_F_Start_Conversion(ADC_CHANNEL_2);
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_F_Start_Conversion>

}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <DIO_F_Set_Pin_Dir>:
#include "DIO.h"


void DIO_F_Set_Pin_Dir(U8_t port_Name, U8_t pin_Number, U8_t dir)
{
	switch (dir)
 14a:	44 23       	and	r20, r20
 14c:	19 f0       	breq	.+6      	; 0x154 <DIO_F_Set_Pin_Dir+0xa>
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	c9 f1       	breq	.+114    	; 0x1c4 <DIO_F_Set_Pin_Dir+0x7a>
 152:	08 95       	ret
	{
		case INPUT:
		switch (port_Name)
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 f0       	breq	.+36     	; 0x17c <DIO_F_Set_Pin_Dir+0x32>
 158:	28 f0       	brcs	.+10     	; 0x164 <DIO_F_Set_Pin_Dir+0x1a>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	d9 f0       	breq	.+54     	; 0x194 <DIO_F_Set_Pin_Dir+0x4a>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	29 f1       	breq	.+74     	; 0x1ac <DIO_F_Set_Pin_Dir+0x62>
 162:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA, pin_Number);
 164:	2a b3       	in	r18, 0x1a	; 26
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_F_Set_Pin_Dir+0x26>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_F_Set_Pin_Dir+0x22>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	8a bb       	out	0x1a, r24	; 26
			break;
 17a:	08 95       	ret
			case PB:
			CLR_BIT(DDRB, pin_Number);
 17c:	27 b3       	in	r18, 0x17	; 23
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_F_Set_Pin_Dir+0x3e>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_F_Set_Pin_Dir+0x3a>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	87 bb       	out	0x17, r24	; 23
			break;
 192:	08 95       	ret
			case PC:
			CLR_BIT(DDRC, pin_Number);
 194:	24 b3       	in	r18, 0x14	; 20
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_F_Set_Pin_Dir+0x56>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_F_Set_Pin_Dir+0x52>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	84 bb       	out	0x14, r24	; 20
			break;
 1aa:	08 95       	ret
			case PD:
			CLR_BIT(DDRD, pin_Number);
 1ac:	21 b3       	in	r18, 0x11	; 17
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_F_Set_Pin_Dir+0x6e>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_F_Set_Pin_Dir+0x6a>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	81 bb       	out	0x11, r24	; 17
			break;
 1c2:	08 95       	ret
			break;
		}
		break;
		
		case  OUTPUT:
		switch (port_Name)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	89 f0       	breq	.+34     	; 0x1ea <DIO_F_Set_Pin_Dir+0xa0>
 1c8:	28 f0       	brcs	.+10     	; 0x1d4 <DIO_F_Set_Pin_Dir+0x8a>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	c9 f0       	breq	.+50     	; 0x200 <DIO_F_Set_Pin_Dir+0xb6>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	11 f1       	breq	.+68     	; 0x216 <DIO_F_Set_Pin_Dir+0xcc>
 1d2:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA, pin_Number);
 1d4:	2a b3       	in	r18, 0x1a	; 26
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_F_Set_Pin_Dir+0x96>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_F_Set_Pin_Dir+0x92>
 1e4:	82 2b       	or	r24, r18
 1e6:	8a bb       	out	0x1a, r24	; 26
			break;
 1e8:	08 95       	ret
			case PB:
			SET_BIT(DDRB, pin_Number);
 1ea:	27 b3       	in	r18, 0x17	; 23
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_F_Set_Pin_Dir+0xac>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_F_Set_Pin_Dir+0xa8>
 1fa:	82 2b       	or	r24, r18
 1fc:	87 bb       	out	0x17, r24	; 23
			break;
 1fe:	08 95       	ret
			case PC:
			SET_BIT(DDRC, pin_Number);
 200:	24 b3       	in	r18, 0x14	; 20
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_F_Set_Pin_Dir+0xc2>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_F_Set_Pin_Dir+0xbe>
 210:	82 2b       	or	r24, r18
 212:	84 bb       	out	0x14, r24	; 20
			break;
 214:	08 95       	ret
			case PD:
			SET_BIT(DDRD, pin_Number);
 216:	21 b3       	in	r18, 0x11	; 17
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_F_Set_Pin_Dir+0xd8>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_F_Set_Pin_Dir+0xd4>
 226:	82 2b       	or	r24, r18
 228:	81 bb       	out	0x11, r24	; 17
 22a:	08 95       	ret

0000022c <DIO_F_Set_Pin_Val>:

/************************Value function********************/

void DIO_F_Set_Pin_Val(U8_t port_Name, U8_t pin_Number, U8_t val)
{
	switch (val)
 22c:	44 23       	and	r20, r20
 22e:	19 f0       	breq	.+6      	; 0x236 <DIO_F_Set_Pin_Val+0xa>
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	c9 f1       	breq	.+114    	; 0x2a6 <DIO_F_Set_Pin_Val+0x7a>
 234:	08 95       	ret
	{
		case LOW:
		switch (port_Name)
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 f0       	breq	.+36     	; 0x25e <DIO_F_Set_Pin_Val+0x32>
 23a:	28 f0       	brcs	.+10     	; 0x246 <DIO_F_Set_Pin_Val+0x1a>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	d9 f0       	breq	.+54     	; 0x276 <DIO_F_Set_Pin_Val+0x4a>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	29 f1       	breq	.+74     	; 0x28e <DIO_F_Set_Pin_Val+0x62>
 244:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA, pin_Number);
 246:	2b b3       	in	r18, 0x1b	; 27
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_F_Set_Pin_Val+0x26>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_F_Set_Pin_Val+0x22>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	8b bb       	out	0x1b, r24	; 27
			break;
 25c:	08 95       	ret
			case PB:
			CLR_BIT(PORTB, pin_Number);
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_F_Set_Pin_Val+0x3e>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_F_Set_Pin_Val+0x3a>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	88 bb       	out	0x18, r24	; 24
			break;
 274:	08 95       	ret
			case PC:
			CLR_BIT(PORTC, pin_Number);
 276:	25 b3       	in	r18, 0x15	; 21
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_F_Set_Pin_Val+0x56>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_F_Set_Pin_Val+0x52>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	85 bb       	out	0x15, r24	; 21
			break;
 28c:	08 95       	ret
			case PD:
			CLR_BIT(PORTD, pin_Number);
 28e:	22 b3       	in	r18, 0x12	; 18
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_F_Set_Pin_Val+0x6e>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_F_Set_Pin_Val+0x6a>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	82 bb       	out	0x12, r24	; 18
			break;
 2a4:	08 95       	ret
			break;
		}
		break;
		
		case  HIGH:
		switch (port_Name)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	89 f0       	breq	.+34     	; 0x2cc <DIO_F_Set_Pin_Val+0xa0>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_F_Set_Pin_Val+0x8a>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <DIO_F_Set_Pin_Val+0xb6>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	11 f1       	breq	.+68     	; 0x2f8 <DIO_F_Set_Pin_Val+0xcc>
 2b4:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA, pin_Number);
 2b6:	2b b3       	in	r18, 0x1b	; 27
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_F_Set_Pin_Val+0x96>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_F_Set_Pin_Val+0x92>
 2c6:	82 2b       	or	r24, r18
 2c8:	8b bb       	out	0x1b, r24	; 27
			break;
 2ca:	08 95       	ret
			case PB:
			SET_BIT(PORTB, pin_Number);
 2cc:	28 b3       	in	r18, 0x18	; 24
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_F_Set_Pin_Val+0xac>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_F_Set_Pin_Val+0xa8>
 2dc:	82 2b       	or	r24, r18
 2de:	88 bb       	out	0x18, r24	; 24
			break;
 2e0:	08 95       	ret
			case PC:
			SET_BIT(PORTC, pin_Number);
 2e2:	25 b3       	in	r18, 0x15	; 21
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_F_Set_Pin_Val+0xc2>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_F_Set_Pin_Val+0xbe>
 2f2:	82 2b       	or	r24, r18
 2f4:	85 bb       	out	0x15, r24	; 21
			break;
 2f6:	08 95       	ret
			case PD:
			SET_BIT(PORTD, pin_Number);
 2f8:	22 b3       	in	r18, 0x12	; 18
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_F_Set_Pin_Val+0xd8>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_F_Set_Pin_Val+0xd4>
 308:	82 2b       	or	r24, r18
 30a:	82 bb       	out	0x12, r24	; 18
 30c:	08 95       	ret

0000030e <main>:
#include <util/delay.h>


int main(void)
{
	ADC_F_Init(ADC_VCC,ADC_PRESCALER_8);
 30e:	63 e0       	ldi	r22, 0x03	; 3
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_F_Init>
	
	int x;
	int y;
	int z;
	DIO_F_Set_Pin_Dir(PD,PIN_6,OUTPUT);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_F_Set_Pin_Dir>
	DIO_F_Set_Pin_Dir(PD,PIN_5,OUTPUT);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	65 e0       	ldi	r22, 0x05	; 5
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_F_Set_Pin_Dir>
	DIO_F_Set_Pin_Dir(PD,PIN_4,OUTPUT);
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_F_Set_Pin_Dir>
	DIO_F_Set_Pin_Dir(PD,PIN_3,OUTPUT);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_F_Set_Pin_Dir>
   
    while (1) 
    {
		ADC_F_Start_Conversion(ADC_CHANNEL_0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_F_Start_Conversion>
		ADC_F_Start_Conversion(ADC_CHANNEL_1);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_F_Start_Conversion>
		ADC_F_Start_Conversion(ADC_CHANNEL_2);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 70 00 	call	0xe0	; 0xe0 <ADC_F_Start_Conversion>
		
		
		x=ADC_F_Read(ADC_CHANNEL_0);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_F_Read>
 356:	8c 01       	movw	r16, r24
		y=ADC_F_Read(ADC_CHANNEL_1);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_F_Read>
 35e:	ec 01       	movw	r28, r24
		z=ADC_F_Read(ADC_CHANNEL_2);
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_F_Read>
		
		
		if (z>450)
 366:	83 3c       	cpi	r24, 0xC3	; 195
 368:	91 40       	sbci	r25, 0x01	; 1
 36a:	34 f0       	brlt	.+12     	; 0x378 <main+0x6a>
		{
			DIO_F_Set_Pin_Val(PD,PIN_4,HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
 376:	05 c0       	rjmp	.+10     	; 0x382 <main+0x74>
			
		}
		else
		{
			DIO_F_Set_Pin_Val(PD,PIN_4,LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
		}
		if (x<300)
 382:	0c 32       	cpi	r16, 0x2C	; 44
 384:	11 40       	sbci	r17, 0x01	; 1
 386:	34 f4       	brge	.+12     	; 0x394 <main+0x86>
		{
			DIO_F_Set_Pin_Val(PD,PIN_5,HIGH);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	65 e0       	ldi	r22, 0x05	; 5
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
 392:	05 c0       	rjmp	.+10     	; 0x39e <main+0x90>
			
		}
		else
		{
			DIO_F_Set_Pin_Val(PD,PIN_5,LOW);
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
		}
		if (y<600)
 39e:	c8 35       	cpi	r28, 0x58	; 88
 3a0:	d2 40       	sbci	r29, 0x02	; 2
 3a2:	5c f4       	brge	.+22     	; 0x3ba <main+0xac>
		{
			DIO_F_Set_Pin_Val(PD,PIN_6,HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	66 e0       	ldi	r22, 0x06	; 6
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
			DIO_F_Set_Pin_Val(PD,PIN_3,LOW);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
 3b8:	c2 cf       	rjmp	.-124    	; 0x33e <main+0x30>
		}
		else
		{
			DIO_F_Set_Pin_Val(PD,PIN_6,LOW);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
			DIO_F_Set_Pin_Val(PD,PIN_3,HIGH);
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_F_Set_Pin_Val>
 3ce:	b7 cf       	rjmp	.-146    	; 0x33e <main+0x30>

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
